<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2021/12/13/test/"/>
    <url>/2021/12/13/test/</url>
    
    <content type="html"><![CDATA[<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一次性搞清楚居中</title>
    <link href="/2021/12/09/%E4%B8%80%E6%AC%A1%E6%80%A7%E6%90%9E%E6%B8%85%E6%A5%9A%E5%B1%85%E4%B8%AD/"/>
    <url>/2021/12/09/%E4%B8%80%E6%AC%A1%E6%80%A7%E6%90%9E%E6%B8%85%E6%A5%9A%E5%B1%85%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="display-flex-margin-auto-不限定宽高"><a href="#display-flex-margin-auto-不限定宽高" class="headerlink" title="display: flex + margin: auto 不限定宽高"></a>display: flex + margin: auto 不限定宽高</h2><p><a href="http://js.jirengu.com/fukacelelo/1/edit?html,css,output">预览</a></p><h2 id="display-grid-不限定宽高"><a href="#display-grid-不限定宽高" class="headerlink" title="display: grid 不限定宽高"></a>display: grid 不限定宽高</h2><p><a href="http://js.jirengu.com/kaqocikuza/1/edit?html,css,output">预览</a></p><h2 id="绝对定位-position-absolute-calc-限定宽高"><a href="#绝对定位-position-absolute-calc-限定宽高" class="headerlink" title="绝对定位 position: absolute + calc() 限定宽高"></a>绝对定位 position: absolute + calc() 限定宽高</h2><p><a href="http://js.jirengu.com/badenokoda/1/edit?html,css,output">预览</a></p><h2 id="absolute-margin"><a href="#absolute-margin" class="headerlink" title="absolute + margin"></a>absolute + margin</h2><p><a href="http://js.jirengu.com/piboyemuve/1/edit?html,css,output">预览</a></p><h2 id="绝对定位-position-absolute-translate-不限定宽高"><a href="#绝对定位-position-absolute-translate-不限定宽高" class="headerlink" title="绝对定位 position: absolute + translate 不限定宽高"></a>绝对定位 position: absolute + translate 不限定宽高</h2><p><a href="http://js.jirengu.com/jotuyevame/1/edit?html,css,output">预览</a></p><h2 id="仿table布局-display-table-table-cell-vertical-align-middle-不限定宽高"><a href="#仿table布局-display-table-table-cell-vertical-align-middle-不限定宽高" class="headerlink" title="仿table布局 display: table/table-cell + vertical-align: middle 不限定宽高"></a>仿table布局 display: table/table-cell + vertical-align: middle 不限定宽高</h2><p><a href="http://js.jirengu.com/vopisaqubu/1/edit?html,css,output">预览</a></p><h2 id="伪元素-after-vertical-align-middle-不限定宽高"><a href="#伪元素-after-vertical-align-middle-不限定宽高" class="headerlink" title="伪元素 :after + vertical-align:middle 不限定宽高"></a>伪元素 :after + vertical-align:middle 不限定宽高</h2><p><a href="http://js.jirengu.com/wavipocica/1/edit?html,css,output">预览</a></p><p>参考文章<a href="https://lhammer.cn/You-need-to-know-css/#/zh-cn/flexbox-layout">@_@</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>居中</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ajax与mock数据</title>
    <link href="/2021/12/09/ajax%E4%B8%8Emock%E6%95%B0%E6%8D%AE/"/>
    <url>/2021/12/09/ajax%E4%B8%8Emock%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-type">XMLHttpRequest</span>()<br>   xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;/login/index&#x27;</span>,<span class="hljs-literal">true</span>)  <span class="hljs-comment">//get &#x27;/login?usename=jirengu&amp;password=123&#x27; 拼接url</span><br>   xhr.send()  <span class="hljs-comment">// POST 在send()里面加入资源</span><br></code></pre></td></tr></table></figure><h2 id="先介绍XMLhttprequest"><a href="#先介绍XMLhttprequest" class="headerlink" title="先介绍XMLhttprequest()"></a>先介绍XMLhttprequest()</h2><h3 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h3><ul><li>XMLHttpRequest.onreadystatechange  readyState 属性发生变化时</li></ul><hr><ul><li>XMLHttpRequest.readyState  返回 一个无符号短整型（unsigned<br>short）数字，代表请求的状态码</li></ul><hr><ul><li>XMLHttpRequest.response  返回一个 ArrayBuffer、Blob、Document，或 DOMString，具体是哪种类型取决于 XMLHttpRequest.* responseType 的值。其中包含整个响应实体<br><code>**json text document &#39;&#39; blob ...**</code></li></ul><hr><ul><li>XMLHttpRequest.status<br>  状态值  (200~300 || 304)</li></ul><hr><ul><li>XMLHttpRequest.timeout <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-literal">true</span>);<br>xhr.timeout = <span class="hljs-number">2000</span>; <span class="hljs-comment">// 超时时间，单位是毫秒</span><br><br>xhr.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 请求完成。在此进行处理。</span><br>&#125;;<br>xhr.ontimeout = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(e)</span> </span>&#123;<br><span class="hljs-comment">// XMLHttpRequest 超时。在此做某事。</span><br>&#125;;<br>xhr.send(<span class="hljs-literal">null</span>);<br><br></code></pre></td></tr></table></figure></li></ul><hr><ul><li>XMLHttpRequestEventTarget.ontimeout<br>当请求超时调用的 event handler</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>XMLHttpRequest.abort()<br>如果请求已被发出，则立刻中止请求</li></ul><hr><ul><li>XMLHttpRequest.getAllResponseHeaders()<br>返回包含指定响应头的字符串，如果响应尚未收到或响应中不存在该报头，则返回 null</li></ul><hr><ul><li>XMLHttpRequest.open()<br>初始化一个请求。该方法只能在 JavaScript 代码中使用，若要在 native code 中初始化请求，请使用 openRequest()</li></ul><hr><ul><li>XMLHttpRequest.overrideMimeType()<br>覆写由服务器返回的 MIME 类型</li></ul><hr><ul><li>XMLHttpRequest.send()<br>发送请求。如果请求是异步的（默认），那么该方法将在请求发送后立即返回</li></ul><hr><ul><li>XMLHttpRequest.setRequestHeader()<br>设置 HTTP 请求头的值。必须在 open() 之后、send() 之前调用 setRequestHeader() 方法</li></ul><hr><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>abort       //onbort<br>error       //onerror<br>load        //onload<br>loadend     //onloaded<br>loadstart   //onloadstart<br>progress    //onprogress<br>timeout     //ontimeout</p><p><code>addEventListener可用</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">addEventListener</span><span class="hljs-params">(<span class="hljs-string">&#x27;load&#x27;</span>, function()</span></span>&#123;<br><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h3><ul><li>open &gt;&gt;&gt; true 异步 false 同步</li></ul><hr><ul><li>获得的json格式数据是字符串 <code>typeof(xhr.responseText)//string</code><br>用JSON.parse()将字符串变成对象，就可以调取其中的key和value了<br>JSON.toString()将对象变成字符串</li></ul><hr><ul><li>GET 和 POST<br>“GET请求没有body，只有url，请求数据放在url的querystring中；POST请求的数据在body中“。但这种情况仅限于浏览器发请求的场景。<a href="https://www.zhihu.com/question/28586791">知乎</a></li><li>封装ajax <a href="">地址</a><h3 id="mock数据"><a href="#mock数据" class="headerlink" title="mock数据"></a>mock数据</h3></li><li>简单的本地服务器 http-server 或线上文件(github)</li></ul><hr><ul><li>线上mock数据的网站<br><a href="https://mock.mengxuegu.com/login">easymock</a></li></ul><hr><p>相关文件代码<a href=""></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dom操作</title>
    <link href="/2021/12/09/dom%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/12/09/dom%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="dcoument"><a href="#dcoument" class="headerlink" title="dcoument"></a>dcoument</h1><p><strong>document.doctype</strong><br><strong>document.title</strong><br><strong>document.characterSet</strong><br><strong>document.head</strong><br><strong>document.body</strong><br><strong>document.images</strong></p><p><strong>属性返回当前文档的状态</strong>：readyState：loading interactive complete<br>compatMode </p><h2 id="document-location-关于url"><a href="#document-location-关于url" class="headerlink" title="document.location 关于url"></a>document.location <strong>关于url</strong></h2><p><img src="https://raw.githubusercontent.com/stevechen1/blog_source/main/uTools_1637316438414.png" alt="实例"><br><code>document.location = url</code></p><h2 id="document-open-write-close"><a href="#document-open-write-close" class="headerlink" title="document open()/write()/close()"></a>document open()/write()/close()</h2><h1 id="节点的获取"><a href="#节点的获取" class="headerlink" title="节点的获取"></a>节点的获取</h1><p><code>css3</code><br>    <strong>getElementById()</strong><br>    <strong>getElementByClass()</strong><br>    <strong>getElementByName()</strong><br>    <strong>getElementByTagName()</strong><br><code>用法</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">document</span>.getElementByClass(<span class="hljs-string">&#x27;box&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>css5</code><br>    <strong>querySelector()</strong><br>    <strong>querySelectorAll()</strong><br><code>tips</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> $ = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">selector</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">document</span>.querySelector(selector)<br>&#125;<br><span class="hljs-keyword">var</span> $$ = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">selector</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">document</span>.querySelectorAll(selector)<br>&#125;<br>$(<span class="hljs-string">&#x27;.box&#x27;</span>)   $$(<span class="hljs-string">&#x27;.box&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h2><p><strong>createElement()</strong><br>    <code>var newDiv = document.createElement(&quot;div&quot;);</code><br><strong>createTextNode()</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Div</span> = document.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Content</span> = document.createTextNode(<span class="hljs-string">&quot;Hello&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>createDocumentFragment()</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> docFragment = <span class="hljs-built_in">document</span>.createDocumentFragment();<br></code></pre></td></tr></table></figure><p><code>tips</code> fragment可以创建一个虚拟标签，dom操作减少</p><h2 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h2><p><strong>appendChild</strong> 在元素末尾加元素</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Div</span> = document.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Content</span> = document.createTextNode(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-keyword">new</span><span class="hljs-type">Div</span>.appendChild(<span class="hljs-keyword">new</span><span class="hljs-type">Content</span>);<br></code></pre></td></tr></table></figure><p><strong>insertBefore()</strong></p><figure class="highlight plaintext"><figcaption><span>newDiv </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs var">var newContent = document.createTextNode(&quot;Hello&quot;);<br>newDiv.insertBefore(newContent, newDiv.firstChild);<br></code></pre></td></tr></table></figure><p><strong>replaceChild()</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span><span class="hljs-type">Div</span>.replaceChild(<span class="hljs-keyword">new</span><span class="hljs-type">Element</span>, oldElement);<br></code></pre></td></tr></table></figure><p><strong>removeChild()</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">parentNode.remove<span class="hljs-constructor">Child(<span class="hljs-params">childNode</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>cloneNode()</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">node</span><span class="hljs-selector-class">.cloneNode</span>(true);(深克隆)<br></code></pre></td></tr></table></figure><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><p><strong>getAttribute()</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">node</span><span class="hljs-selector-class">.getAttribute</span>(<span class="hljs-string">&#x27;id&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>createAttribute()</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">attribute</span> = document.createAttribute(name)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>setAttribute()</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">var <span class="hljs-keyword">node</span> <span class="hljs-title">= document</span>.getElementById(<span class="hljs-string">&quot;div1&quot;</span>);<br>node.setAttribute(<span class="hljs-string">&quot;my_attrib&quot;</span>, <span class="hljs-string">&quot;newVal&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>romoveAttribute()</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">node</span><span class="hljs-selector-class">.removeAttribute</span>(<span class="hljs-string">&#x27;id&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="innerText和innerHTML"><a href="#innerText和innerHTML" class="headerlink" title="innerText和innerHTML"></a>innerText和innerHTML</h2><p><strong>innerText</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">node.innerText<span class="hljs-regexp">//</span><span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p><strong>innerHTML</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">node.innerHTML<span class="hljs-comment">//&quot;hello&lt;p&gt;world&lt;/p&gt; </span><br><span class="hljs-string">&quot;</span><br>node.innerHTML = &#x27;&lt;a&gt;&#x27;+<span class="hljs-number">90</span>+&#x27;&lt;/a&gt;&#x27;<span class="hljs-comment">//拼装json的数据</span><br></code></pre></td></tr></table></figure><p><strong>修改style</strong><br>//麻烦不用,使用class操作</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> node = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;p&#x27;</span>)<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">color</span> = <span class="hljs-built_in">window</span>.getComputedStyle(node).color<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">color</span>)<br></code></pre></td></tr></table></figure><h2 id="class操作"><a href="#class操作" class="headerlink" title="class操作"></a>class操作</h2><p><strong>add</strong><br><strong>remove</strong><br><strong>toggle</strong><br><strong>contains</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> nodeBox = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>)<br>console<span class="hljs-selector-class">.log</span>( nodeBox<span class="hljs-selector-class">.classList</span> )<br>nodeBox<span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.add</span>(<span class="hljs-string">&#x27;active&#x27;</span>)   <span class="hljs-comment">//新增 class</span><br>nodeBox<span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>)  <span class="hljs-comment">//删除 class</span><br>nodeBox<span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.toggle</span>(<span class="hljs-string">&#x27;active&#x27;</span>)   <span class="hljs-comment">//新增/删除切换</span><br>node<span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.contains</span>(<span class="hljs-string">&#x27;active&#x27;</span>)   <span class="hljs-comment">// 判断是否拥有 class</span><br></code></pre></td></tr></table></figure><h2 id="页面的高度"><a href="#页面的高度" class="headerlink" title="页面的高度"></a>页面的高度</h2><p><strong>clientHeight</strong> //content+padding<br><strong>offsetHeight</strong>//content + padding +border<br><strong>scrollHeight</strong>// 滚动距离<br><strong>scrollTop</strong>//当前目标距离顶部的距离<br><strong>window.innerHeight</strong>//不变（相对）<br><strong>element.getBoundingClientRect()</strong>//</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">node.getBoundingClientRect()</span><br><span class="hljs-string">//DOMRect&#123;x:</span> <span class="hljs-number">8</span><span class="hljs-string">,</span> <span class="hljs-attr">y:</span> <span class="hljs-number">8</span><span class="hljs-string">,</span> <span class="hljs-attr">width:</span> <span class="hljs-number">856</span><span class="hljs-string">,</span> <span class="hljs-attr">height:</span> <span class="hljs-number">57.60000228881836</span><span class="hljs-string">,</span> <span class="hljs-attr">top:</span> <span class="hljs-number">8</span><span class="hljs-string">,</span> <span class="hljs-string">…&#125;</span><br></code></pre></td></tr></table></figure><p><code>tips</code><br>scrollTop + clientHeight = scrollHeight//是否到达底部的判断<br>对象是否在页面中判断//<strong>懒加载</strong></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><strong>HTMLCllection和NodeList(forEach)</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>回调函数</title>
    <link href="/2021/11/25/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <url>/2021/11/25/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="函数声明三种方式"><a href="#函数声明三种方式" class="headerlink" title="函数声明三种方式"></a>函数声明三种方式</h2><ul><li>function(){}<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span>(s) &#123;<br>  console.log(s);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>函数表达式<br>将匿名函数赋值给print<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">var <span class="hljs-built_in">print</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(s)</span></span> &#123;<br>  console.<span class="hljs-built_in">log</span>(s); <br>&#125;;<br></code></pre></td></tr></table></figure></li><li>Function构造函数<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">var</span> <span class="hljs-keyword">add</span> = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-keyword">Function</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-string">&#x27;x&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-string">&#x27;y&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-string">&#x27;return x + y&#x27;</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span>;</span><br></code></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2>按照 MDN 的描述：回调函数是作为参数传给另一个函数的函数，然后通过在外部函数内部调用该回调函数以完成某种操作。</li></ul><p>简单来说，回调函数是一个函数，将会在另一个函数完成执行后<strong>立即执行</strong>。回调函数是一个作为参数传给另一个 JavaScript 函数的函数。这个回调函数会在传给的函数内部执行 。</p><h2 id="回调函数的作用"><a href="#回调函数的作用" class="headerlink" title="回调函数的作用"></a>回调函数的作用</h2><p>因为浏览器中的js运行是单线程的，需要使用回调函数来防止堵塞。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><p>使用promise<br>借助 async-await<br>使用 async.js 库</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nodejs搭建静态服务器</title>
    <link href="/2021/11/25/nodejs/"/>
    <url>/2021/11/25/nodejs/</url>
    
    <content type="html"><![CDATA[<h2 id="本地搭建"><a href="#本地搭建" class="headerlink" title="本地搭建"></a>本地搭建</h2><p>http-sever (npm)</p><hr><h2 id="本地静态服务器"><a href="#本地静态服务器" class="headerlink" title="本地静态服务器"></a>本地静态服务器</h2><p>客户端发送url req</p><ul><li>req<br>服务器解析返回数据  res</li><li>res 中解析url,来对应相应的文件</li><li>nodejs 中有一个个模块 reauire()方法来调用模块 模块中也有对应的方法<br>比如<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&#x27;http&#x27;</span>)</span></span> <span class="hljs-comment">//建立服务器</span><br><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&#x27;path&#x27;</span>)</span></span> <span class="hljs-comment">//不同系统之间文件的读取url不同 / \</span><br><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&#x27;fs&#x27;</span>)</span></span> <span class="hljs-comment">// 读取文件</span><br><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&#x27;url&#x27;</span>)</span></span> <span class="hljs-comment">//读取url</span><br></code></pre></td></tr></table></figure><hr> 浏览器到服务器的流程</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js命名规范</title>
    <link href="/2021/11/22/js%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <url>/2021/11/22/js%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><h3 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h3><p><strong>大驼峰</strong> <code>StudentInfo</code><br><strong>小驼峰</strong> <code>studentInfo</code></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>前缀是名词 小驼峰<br><code>var maxCount = 10</code></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>前缀是动词 小驼峰<br><code>function canRead()&#123; return true &#125;</code><br><img src="https://raw.githubusercontent.com/stevechen1/blog_source/main/uTools_1637511383743.png" alt="常见"><br>常见动词如上</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>名称全部大写 使用大写字母和下划线的组合来命名，下划线用以分割单词<br><code>var MAX_COUNT = 10;</code></p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>大驼峰命名方法 首字母大写<br><code>function Student(e)&#123; this.name = e&#125;</code></p><h3 id="类的成员"><a href="#类的成员" class="headerlink" title="类的成员"></a>类的成员</h3><h4 id="公共属性-与变量相同"><a href="#公共属性-与变量相同" class="headerlink" title="公共属性 与变量相同"></a>公共属性 与变量相同</h4><h4 id="私有属性-前缀是下划线-后面和公共属性一样"><a href="#私有属性-前缀是下划线-后面和公共属性一样" class="headerlink" title="私有属性 前缀是下划线_ 后面和公共属性一样"></a>私有属性 前缀是下划线_ 后面和公共属性一样</h4><h2 id="注释的规范"><a href="#注释的规范" class="headerlink" title="注释的规范"></a>注释的规范</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> maxCount = <span class="hljs-number">10</span>;<span class="hljs-comment">// 单行注释</span><br></code></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*多行注释</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">多行注释*/</span><br></code></pre></td></tr></table></figure><h3 id="函数（方法）的注释"><a href="#函数（方法）的注释" class="headerlink" title="函数（方法）的注释"></a>函数（方法）的注释</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">/**<br><span class="hljs-bullet">* </span>函数说明 <br><span class="hljs-bullet">* </span>@关键字 <br>*/<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/stevechen1/blog_source/main/uTools_1637512059055.png"></p><h1 id="框架开发"><a href="#框架开发" class="headerlink" title="框架开发"></a>框架开发</h1><h2 id="全局变量冲突"><a href="#全局变量冲突" class="headerlink" title="全局变量冲突"></a>全局变量冲突</h2><p>在团队开发或者引入第三方JS文件时，有时会造成全局对象的名称冲突，比如a.js有个全局函数sendMsg()，b.js也又有个全局函数sendMsg()，引入a.js和b.js文件时，会造成sendMsg()函数冲突<br><img src="https://raw.githubusercontent.com/stevechen1/blog_source/main/uTools_1637512305486.png"></p><h2 id="单全局变量"><a href="#单全局变量" class="headerlink" title="单全局变量"></a>单全局变量</h2><p>　所创建的全局对象名称是独一无二的，并将所有的功能代码添加到这个全局对象上。调用自己所写的代码时，以这个全局对象为入口点。<br><img src="https://raw.githubusercontent.com/stevechen1/blog_source/main/uTools_1637512325272.png"><br>比如</p><ul><li>JQuery的全局对象：$和JQuery</li><li>ExtJS的全局对象： Ext<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2>在项目规模日益壮大时，可采用命名空间方式对JS代码进行规范：即将代码按照功能进行分组，以组的形式附加到单全局对象上<br><img src="https://raw.githubusercontent.com/stevechen1/blog_source/main/uTools_1637512246597.png"><br>参考文章: <a href="https://www.cnblogs.com/polk6/p/4660195.html#Menu3-FrameDev">JavaScript命名规范</a><br><a href="https://segmentfault.com/a/1190000020039039">具体的使用情况</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOM操作</title>
    <link href="/2021/11/19/dom/"/>
    <url>/2021/11/19/dom/</url>
    
    <content type="html"><![CDATA[<h2 id="dcoument"><a href="#dcoument" class="headerlink" title="dcoument"></a>dcoument</h2><p><strong>document.doctype</strong><br><strong>document.title</strong><br><strong>document.characterSet</strong><br><strong>document.head</strong><br><strong>document.body</strong><br><strong>document.images</strong></p><p><strong>属性返回当前文档的状态</strong>：readyState：loading interactive complete<br>compatMode </p><h3 id="document-location-关于url"><a href="#document-location-关于url" class="headerlink" title="document.location 关于url"></a>document.location <strong>关于url</strong></h3><p><img src="https://raw.githubusercontent.com/stevechen1/blog_source/main/uTools_1637316438414.png" alt="实例"><br><code>document.location = url</code></p><h3 id="document-open-write-close"><a href="#document-open-write-close" class="headerlink" title="document open()/write()/close()"></a>document open()/write()/close()</h3><h2 id="节点的获取"><a href="#节点的获取" class="headerlink" title="节点的获取"></a>节点的获取</h2><p><code>css3</code><br>    <strong>getElementById()</strong><br>    <strong>getElementByClass()</strong><br>    <strong>getElementByName()</strong><br>    <strong>getElementByTagName()</strong><br><code>用法</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">document</span>.getElementByClass(<span class="hljs-string">&#x27;box&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>css5</code><br>    <strong>querySelector()</strong><br>    <strong>querySelectorAll()</strong><br><code>tips</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> $ = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">selector</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">document</span>.querySelector(selector)<br>&#125;<br><span class="hljs-keyword">var</span> $$ = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">selector</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">document</span>.querySelectorAll(selector)<br>&#125;<br>$(<span class="hljs-string">&#x27;.box&#x27;</span>)   $$(<span class="hljs-string">&#x27;.box&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h3><p><strong>createElement()</strong><br>    <code>var newDiv = document.createElement(&quot;div&quot;);</code><br><strong>createTextNode()</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Div</span> = document.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Content</span> = document.createTextNode(<span class="hljs-string">&quot;Hello&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>createDocumentFragment()</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> docFragment = <span class="hljs-built_in">document</span>.createDocumentFragment();<br></code></pre></td></tr></table></figure><p><code>tips</code> fragment可以创建一个虚拟标签，dom操作减少</p><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><p><strong>appendChild</strong> 在元素末尾加元素</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Div</span> = document.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Content</span> = document.createTextNode(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-keyword">new</span><span class="hljs-type">Div</span>.appendChild(<span class="hljs-keyword">new</span><span class="hljs-type">Content</span>);<br></code></pre></td></tr></table></figure><p><strong>insertBefore()</strong></p><figure class="highlight plaintext"><figcaption><span>newDiv </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs var">var newContent = document.createTextNode(&quot;Hello&quot;);<br>newDiv.insertBefore(newContent, newDiv.firstChild);<br></code></pre></td></tr></table></figure><p><strong>replaceChild()</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span><span class="hljs-type">Div</span>.replaceChild(<span class="hljs-keyword">new</span><span class="hljs-type">Element</span>, oldElement);<br></code></pre></td></tr></table></figure><p><strong>removeChild()</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">parentNode.remove<span class="hljs-constructor">Child(<span class="hljs-params">childNode</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>cloneNode()</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">node</span><span class="hljs-selector-class">.cloneNode</span>(true);(深克隆)<br></code></pre></td></tr></table></figure><h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><p><strong>getAttribute()</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">node</span><span class="hljs-selector-class">.getAttribute</span>(<span class="hljs-string">&#x27;id&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>createAttribute()</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">attribute</span> = document.createAttribute(name)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>setAttribute()</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">var <span class="hljs-keyword">node</span> <span class="hljs-title">= document</span>.getElementById(<span class="hljs-string">&quot;div1&quot;</span>);<br>node.setAttribute(<span class="hljs-string">&quot;my_attrib&quot;</span>, <span class="hljs-string">&quot;newVal&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>romoveAttribute()</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">node</span><span class="hljs-selector-class">.removeAttribute</span>(<span class="hljs-string">&#x27;id&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="innerText和innerHTML"><a href="#innerText和innerHTML" class="headerlink" title="innerText和innerHTML"></a>innerText和innerHTML</h3><p><strong>innerText</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">node.innerText<span class="hljs-regexp">//</span><span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p><strong>innerHTML</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">node.innerHTML<span class="hljs-comment">//&quot;hello&lt;p&gt;world&lt;/p&gt; </span><br><span class="hljs-string">&quot;</span><br>node.innerHTML = &#x27;&lt;a&gt;&#x27;+<span class="hljs-number">90</span>+&#x27;&lt;/a&gt;&#x27;<span class="hljs-comment">//拼装json的数据</span><br></code></pre></td></tr></table></figure><p><strong>修改style</strong><br>//麻烦不用,使用class操作</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> node = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;p&#x27;</span>)<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">color</span> = <span class="hljs-built_in">window</span>.getComputedStyle(node).color<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">color</span>)<br></code></pre></td></tr></table></figure><h3 id="class操作"><a href="#class操作" class="headerlink" title="class操作"></a>class操作</h3><p><strong>add</strong><br><strong>remove</strong><br><strong>toggle</strong><br><strong>contains</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> nodeBox = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>)<br>console<span class="hljs-selector-class">.log</span>( nodeBox<span class="hljs-selector-class">.classList</span> )<br>nodeBox<span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.add</span>(<span class="hljs-string">&#x27;active&#x27;</span>)   <span class="hljs-comment">//新增 class</span><br>nodeBox<span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>)  <span class="hljs-comment">//删除 class</span><br>nodeBox<span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.toggle</span>(<span class="hljs-string">&#x27;active&#x27;</span>)   <span class="hljs-comment">//新增/删除切换</span><br>node<span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.contains</span>(<span class="hljs-string">&#x27;active&#x27;</span>)   <span class="hljs-comment">// 判断是否拥有 class</span><br></code></pre></td></tr></table></figure><h3 id="页面的高度"><a href="#页面的高度" class="headerlink" title="页面的高度"></a>页面的高度</h3><p><strong>clientHeight</strong> //content+padding<br><strong>offsetHeight</strong>//content + padding +border<br><strong>scrollHeight</strong>// 滚动距离<br><strong>scrollTop</strong>//当前目标距离顶部的距离<br><strong>window.innerHeight</strong>//不变（相对）<br><strong>element.getBoundingClientRect()</strong>//</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">node.getBoundingClientRect()</span><br><span class="hljs-string">//DOMRect&#123;x:</span> <span class="hljs-number">8</span><span class="hljs-string">,</span> <span class="hljs-attr">y:</span> <span class="hljs-number">8</span><span class="hljs-string">,</span> <span class="hljs-attr">width:</span> <span class="hljs-number">856</span><span class="hljs-string">,</span> <span class="hljs-attr">height:</span> <span class="hljs-number">57.60000228881836</span><span class="hljs-string">,</span> <span class="hljs-attr">top:</span> <span class="hljs-number">8</span><span class="hljs-string">,</span> <span class="hljs-string">…&#125;</span><br></code></pre></td></tr></table></figure><p><code>tips</code><br>scrollTop + clientHeight = scrollHeight//是否到达底部的判断<br>对象是否在页面中判断//<strong>懒加载</strong></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>HTMLCllection和NodeList(forEach)</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Dom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象编程(oop)难点合集</title>
    <link href="/2021/11/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-oop-%E9%9A%BE%E7%82%B9%E5%90%88%E9%9B%86/"/>
    <url>/2021/11/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-oop-%E9%9A%BE%E7%82%B9%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p><code>es5</code> <code>es6有class</code></p><h2 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h2><p>有key value 的集合称为对象 ，函数和数组是一种特殊的对象（从对象的角度，有属性ex:<code> f.name --&gt; f</code>） 基本数据类型是对象?</p><h2 id="实例对象和构造函数"><a href="#实例对象和构造函数" class="headerlink" title="实例对象和构造函数"></a>实例对象和构造函数</h2><p>构造函数来构造对象，<code>var p = new f</code>,p是f构造出来的对象，称为f的实例<br>三步：</p><blockquote><p>创建空对象，{}.<strong>proto</strong> === f.prototype<br>执行函数f,this指的的是obj环境下<br>返回new完成的obj</p></blockquote><hr><p>例子</p><blockquote><p>function People(name, age){<br>    this.name = name<br>    this.age = age<br>    //return ‘hello’ (注意return的内容 一般情况下会被覆盖，当return的数据结构与People相同时,return的值)<br>}<br>var p = new People(‘饥人谷’, 3)<br><img src="https://github.com/stevechen1/blog_source/blob/main/return.png?raw=true"></p></blockquote><h2 id="prototype-和-proto-的关系"><a href="#prototype-和-proto-的关系" class="headerlink" title="prototype 和 __proto__的关系"></a>prototype 和 __proto__的关系</h2><p>记住下面的图<img src="https://github.com/stevechen1/blog_source/blob/main/prototype.png?raw=true" alt="原型链"></p><blockquote><p>函数一般放到prototype对象上方便调用</p></blockquote><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>Object   Function</p><hr><p>Object是一切对象的__proto__<br><code>Object.prototype.__proto__ = null</code><img src="https://github.com/stevechen1/blog_source/blob/main/Object.png?raw=true" alt="object"><br><code>Object.__proto__ === Function.prototype</code>//Object是函数<br>Function是一切函数的__proto__(Function.<strong>proto</strong> === Function.prototype)true</p><hr><p>四类：理清关系</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">function <span class="hljs-selector-tag">p</span>()&#123;&#125;  <span class="hljs-comment">//函数</span><br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = new <span class="hljs-selector-tag">p</span>  <span class="hljs-comment">// 对象</span><br>Function   <span class="hljs-comment">// 函数</span><br><span class="hljs-function"><span class="hljs-title">Object</span><span class="hljs-params">(valueOf,toString)</span></span> <span class="hljs-comment">// 函数</span><br></code></pre></td></tr></table></figure><h2 id="方法的应用-gt-轮播的实现"><a href="#方法的应用-gt-轮播的实现" class="headerlink" title="方法的应用==&gt;轮播的实现"></a>方法的应用==&gt;轮播的实现</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Object  prototype __proto__ 原型和原型链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-hover</title>
    <link href="/2021/11/04/css-hover/"/>
    <url>/2021/11/04/css-hover/</url>
    
    <content type="html"><![CDATA[<p>css 中的:hover对其他元素<strong>产生作用</strong>的可以使用的情况有以下几种<br>1.其他元素在child中 直接空格就可以使用</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">.box</span><span class="hljs-function">:hover</span> <span class="hljs-string">.child</span><br></code></pre></td></tr></table></figure><p>2.其他元素在同级中 通过选择器~ or +有共同的父元素 (相邻兄弟选择器 (+) 通用兄弟选择器 (~) )</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.box1</span><span class="hljs-selector-pseudo">:hover</span> ~ <span class="hljs-selector-class">.box2</span><br><span class="hljs-selector-class">.box1</span><span class="hljs-selector-pseudo">:hover</span> + .box2<br></code></pre></td></tr></table></figure><p>总结： 上述只是简单的css中的操作 以上都可以通过js 的calss操作解决</p>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>this</title>
    <link href="/2021/11/04/this/"/>
    <url>/2021/11/04/this/</url>
    
    <content type="html"><![CDATA[<p>参考文章 <a href="https://zhuanlan.zhihu.com/p/23804247">知乎</a></p><h2 id="this的定义"><a href="#this的定义" class="headerlink" title="this的定义"></a>this的定义</h2><p>this的指向是不确定的，this就是属性或方法“当前”所在的对象（运行环境，找到此时this所在的环境，this代表的就是上层对象）<br>多层this</p><blockquote><p>var o = {<br>  f1: function () {<br>    console.log(this);<br>    var f2 = function () {<br>      console.log(this);<br>    }();<br>  }<br>}<br>o.f1()<br>// Object<br>// Window<br><strong>第一个指代的是o ,第二个指代的是window(非严格模式)</strong></p></blockquote><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="绑定-this"><a href="#绑定-this" class="headerlink" title="绑定_this"></a>绑定_this</h3><p><code>var _this = this</code><br>将对象绑定在_this里面</p><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>严格模式下，指向顶层会报错</p>]]></content>
    
    
    
    <tags>
      
      <tag>this</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+blog的实现</title>
    <link href="/2021/11/01/11-1/"/>
    <url>/2021/11/01/11-1/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo下载"><a href="#hexo下载" class="headerlink" title="hexo下载"></a>hexo下载</h1><p> <a href="https://hexo.io/zh-cn/">官网</a><br> node.js支持</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code>`npm install hexo-cli -g`  </code></pre><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>github创建仓库 <code>stevechen1.github.io</code><br><img src="https://raw.githubusercontent.com/stevechen1/blog_source/main/uTools_1637321579707.png"></p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>下载 配置</p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p><code>hexo init</code><br><code>hexo new &#39;title&#39;</code><br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code><br><code>hexo s</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
